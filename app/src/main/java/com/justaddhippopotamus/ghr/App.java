/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.justaddhippopotamus.ghr;

import com.justaddhippopotamus.ghr.server.Server;
import com.justaddhippopotamus.ghr.server.commands.ServerCommands;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class App {
    public static final String fileDir = "src/main/resources";

    public static void printLicense() {
        try {
            System.out.println(new String(getInputStreamFor("/LICENSE").readAllBytes(),Server.CHARSET));
        } catch (IOException e) {
            System.out.println("License file missing...bombing.");
            throw new RuntimeException(e);
        }
    }
    public static void printHelp() {
        System.out.println("Command Line Arguments:");
        System.out.println("    --port <portnum> (default is 6379)");
        System.out.println("    --file <dbfilename> (by default it is dbio.respdb");
        System.out.println("    --memoryOnly  (No saving or reading a db..");
        System.out.println("    --license (prints the license)");
        System.out.println("    --help/-?/-h (This help)");
        System.out.println("    --password <password> (Default is none)");
        System.out.println("    --verbose (Verbose operation...spammy)");
        System.out.println();
        System.out.println("Go Horse Race is a java implementation of redis. Lua included not lua functions");
        System.out.println("but EVAL and EVALSHA are supported. (Using LuaJ, which is apparently lua 5.2)");
        System.out.println("Lua is somewhat sandboxed, but it is lua in java so there might be a way to make");
        System.out.println("write and read from the local file system.");
        System.out.println();
        System.out.println("GEO,PX,TDIGEST,TOPK,FT,CF,CMS,X commands not supported but they do return a");
        System.out.println("nice error message saying that they are not supported. Adding them is left as an");
        System.out.println("exercise for the listener.");
        System.out.println("");
        System.out.println("This has not been thoroughly tested. Be warned.");
    }

    public static void printBanner() {
        System.out.println("Go Horse Race db.                                                 ,--,");
        System.out.println("A somewhat complete 7.ish redis implementation.             _ ___/ /\\|");
        System.out.println("If this is somehow in production, just stop right now.     ;( )__, )");
        System.out.println("Read the license.                                         ; //   '--;");
        System.out.println("                                                            \\     |");
        System.out.println("                                                             ^    ^");
    }
    public static void main(String[] args) {
        running = true;
        printBanner();

        ArrayList<String> argsList = new ArrayList<>();
        for( String s : args ) {
            argsList.add(s);
        }

        while( !argsList.isEmpty() ) {
            String currentArg = argsList.remove(0);
            switch(currentArg) {
                case "--password":
                    password = argsList.remove(0);
                    break;
                case "--port":
                    port = Integer.parseInt(argsList.remove(0));
                    break;
                case "--file":
                    dbFile = currentArg;
                    break;
                case "--help":
                case "-?":
                case "-h":
                    printHelp();
                    System.exit(0);
                    return;
                case "-v":
                case "--verbose":
                    verbose = true;
                    break;
                case "--license":
                    printLicense();
                    System.exit(0);
                    return;
                case "--memoryOnly":
                    dbFile = null;
                    break;
                default:
                    printHelp();
                    System.exit(-1);
                    return;
            }
        }


        Server newServer = new Server(dbFile, port, password);
        Server.verbose = verbose;
        newServer.goDogGo();

        Runtime.getRuntime().addShutdownHook( new Thread() {
            @Override
            public void run() {
                System.out.println("Got Interrupt.");
                newServer.stopIfNecessary();
                while( !newServer.mainLoopDone ) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        });

        while( !newServer.mainLoopDone ) {
            try {
                Thread.sleep(500);
            } catch (java.lang.InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        System.exit(0);
    }

    public static boolean verbose = false;
    public static boolean running = false;
    public static boolean killing = false;

    public static int port = 6379;
    public static String password = null;
    public static String dbFile = "dbio.respdb";

    public static InputStream getInputStreamFor(String resourcePath) {
        InputStream is = ServerCommands.class.getResourceAsStream(resourcePath);
        if (is == null) {
            try {
                is = new FileInputStream(fileDir + resourcePath);
            } catch (Exception e) {
            }
        }
        return is;
    }
}
